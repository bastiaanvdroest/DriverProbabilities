%\VignetteIndexEntry{Introduction to DriverProbabilities}
\documentclass{article}
\usepackage{float}
\usepackage[natbibapa]{apacite}
\bibliographystyle{apacite}

<<style, eval=TRUE, echo=FALSE, results=tex>>=
BiocStyle::latex(use.unsrturl=FALSE)
@

\title{Introduction to \Biocpkg{DriverProbabilities}}
\author{Bastiaan Van der Roest}
\affil{University Medical Center Utrecht, Utrecht, The Netherlands}
\date{\today}

\begin{document} 
\SweaveOpts{concordance=TRUE}

\maketitle

\tableofcontents

\newpage{}

<<options, echo=FALSE>>=
options(width=96)
library(ggplot2)
@

\section{Introduction}

\textit{In vitro} culturing stem cells for application in for instance 
regenerative medicine, takes potential risks on genetic diseases. Genetic 
changes, caused by mutation accumulation during culturing, can lead to many
genetic disorders, including cancer. In cancer, these genetic changes are
mostly on positions which benefit the affected cell, by activating oncogenic
genes. A large number of those positions is already found and can be used to 
calculate a risk on getting the so-called driver mutations. 

During \textit{in vitro} culturing the mitosis rate and doubling time of a cell
population can be monitored, along with the number of mutations per time. Not
only physiological changes can be monitored, also the genetic changes.
Mutation accumulation leaves a spectrum of different mutation types behind in 
the genome, giving potential risks on the mutation types. This spectrum can 
differ between cell types and even between cells of the same type.
Mutations occur in the whole genome, however cells have developed methods to 
protect the important parts of the genome against mutation accumulation. Genomic
regions are in general more depleted in mutations than whole genome, so in order
to predict the risk on mutations in cancer, this depletion has to be taken into
account. 

The package \Biocpkg{DriverProbabilities} is developed to use all of the above
data, that is the mitosis rate, doubling time, mutational spectrum and depletion 
tests, to calculate the number of oncogenic driver mutations occuring during 
culturing of stem cells. Background information of the package is described
in the article found on bioRxiv: 
\url{https://www.biorxiv.org/content/biorxiv/early/2018/09/29/430165.full.pdf}

\newpage{}

\section{Load package}

If you are a first time user, read the README on how to install the package 
from Github. After installing load the package by using the path to the
package:

<<setwd, echo = F>>=
options(stringsAsFactors = F)
@


<<load_package>>=
devtools::load_all("../../DriverProbs")
@


\section{Data}

To build a probability model for oncogenic driver mutations, data is needed 
about the cell dynamics and genetics. First store all input data into variables
and then process the data to get it in the right format for modelling.

\subsection{Import data into variables}
Start with importing data about the cell dynamics, including cell type, 
doubling time, mitosis rate etc. To read the data as strings, first set
\texttt{options(stringsAsFactors = F)}. Then set the basic parameters:

<<inf_basic>>=
# Number of cells at day 0
init_numb_cells <- 1

# The length of the whole genome
wg_length <- 2881033286

# The percentage of the Coding Sequence of the whole genome
CDS_perc <- 0.015
@

The information about which sample is which cell type must be included:
<<cell_inf>>=
# Set the in vitro cell types
cell_types <- c("iPS", "liver", "SI")

# Give the file with sample name and cell type information
ST <- "Sampletypes.txt"

# Set the in vivo tissue
invivo_tissue <- "colon"
@

Now set the parameters of the cell dynamics:

<<cell_inf_dyn>>=
# Doubling time for cell population in hours
doubling_time <- list('iPS'=23.08, 'liver'=46 ,'SI'=44.38)

# Mitosis rate for cell population
mitosis_rate <- list('iPS'=18, 'liver'=26, 'SI'=26)

# Mutation rate per genome per doubling
mutation_rate <- 'mutation_rates.txt'
@

The time to culture the cells must be given in hours. In order to give the time
in whole factors of generation cycle time, the mitosis rate, the least common
multiplier between the cell types can be used:

<<time>>=
library(pracma)

# Time to culture the cells in hours. Give time in whole factors of 
# generation cycle time
t_culture <- Lcm(Lcm(mitosis_rate[['iPS']], mitosis_rate[['SI']]), 
                 mitosis_rate[['liver']])*10
@

Furthermore, give the data about the cell genetics, that is the mutational
spectra of \textit{in vitro} and \textit{in vivo} grown cells and the results
of the enrichment/depletion tests from the \Biocpkg{MutationalPatterns}
package.

<<cell_inf_genetic>>=
# File containing the mutational spectrum for all the samples together
mut_spec_file <- 'Mutation_spectrum_tissue.txt'

# File containing the mutational spectrum for the in vivo samples
mut_spec_in_vivo_file <- 'Mutation_spectrum_in_vivo_tot.txt'

# File containing the enrichment or depletion of the CDS in mutations
CDS_dep_file_invitro <- 'CDS_gene_regions_distr.txt'
CDS_dep_file_invivo <- 'CDS_gene_regions_distr_invivo.txt'
@

To see which mutations are ongenic drivers, import a catalog with oncogenic
mutations, along with a file in which for each gene the mode of action is 
given.

<<cancer_catalog>>=
# File containing validated oncogenic mutations
oncogenic_mutations <- 'catalog_of_validated_oncogenic_mutations.tsv'

# File containing activity of driver genes while mutated
gene_MoA <- 'gene_MoA.tsv'
@

As final input, state if you want to calculate the probabilities on oncogenic
driver mutations per gene or over all genes. If per gene is wanted, specific 
genes can be selected:

<<wanted_genes>>=
# Select if you want probabilities per gene of all genes at once
prob_per_gene = F

# Give a vector of the genes for which you want to visualize the probabilities
wanted_genes = 'all'
@

\subsection{Process data into the modelling format}

To process the data to have it in the right format for using the model, the
function \texttt{processData} can be runned. All needed variables for
downstream functions will be stored in the global environment:

<<process_data>>=
processData(mutation_rate_file = mutation_rate,
            oncogenic_mutations_file = oncogenic_mutations,
            gene_MoA_file = gene_MoA,
            CDS_dep_invitro_file = CDS_dep_file_invitro,
            CDS_dep_invivo_file = CDS_dep_file_invivo,
            sample_celltypes_file = ST,
            invivo_tissue = invivo_tissue,
            mut_spec_invitro_file = mut_spec_file,
            mut_spec_invivo_file = mut_spec_in_vivo_file)
@

Per default, the newly made list \texttt{driver\_counts} will contain counts
of six single nucleotide variants ("C>A", "C>G", "C>T", "T>A", "T>C", "T>G"). 
It is also posible to give counts of the 96 mutation spectrum, taken the 5' and
3' prime nucleotide of a mutation basepair into account. Therefore run the 
\texttt{processData} function with the \texttt{trinucleotide} argument set to 
\texttt{True}:

<<process_data_tri, eval=F>>=
processData(mutation_rate_file = mutation_rate,
            oncogenic_mutations_file = oncogenic_mutations,
            gene_MoA_file = gene_MoA,
            trinucleotide = T,
            CDS_dep_invitro_file = CDS_dep_file_invitro,
            CDS_dep_invivo_file = CDS_dep_file_invivo,
            sample_celltypes_file = ST,
            invivo_tissue = invivo_tissue,
            mut_spec_invitro_file = mut_spec_file,
            mut_spec_invivo_file = mut_spec_in_vivo_file)
@

This manual will continue with the six mutation types. 

A check must be done to see if the cell types in the given files were spelled 
in the same way. If this is not the case, the model can take the wrong data
for the cell types. 

<<check_cell_types>>=
cell_types
names(probs_snv)
names(CDS_dep)
@

Change the names if necessary:

<<change_cell_types>>=
names(probs_snv)[names(probs_snv)=="IPS"] <- "iPS"
names(CDS_dep)[names(CDS_dep) %in% c("Liver","Small_Intestine")] <- c("liver",
                                                                      "SI")
@

The list \texttt{driver\_counts} can be extended with genes which are not in 
the given catalog:

<<extend_driver_counts>>=
driver_counts[['TP53']] <- table(c("C>T","C>T",
                                   "C>T","C>G",
                                   "C>T","C>T",
                                   "T>C","C>T",
                                   "C>A","C>T",
                                   "C>A"))
driver_counts[['BRAF.V600E']] <- table("T>A")
@

If only driver counts of genes not present in the catalog must be analyzed, 
it is optional to not fill the \texttt{driver\_counts} list with 
\texttt{processData}: 

<<process_data_tri, eval=F>>=
processData(mutation_rate_file = mutation_rate,
            process_drivers = F,
            CDS_dep_invitro_file = CDS_dep_file_invitro,
            CDS_dep_invivo_file = CDS_dep_file_invivo,
            sample_celltypes_file = ST,
            invivo_tissue = invivo_tissue,
            mut_spec_invitro_file = mut_spec_file,
            mut_spec_invivo_file = mut_spec_in_vivo_file)
@

\section{\textit{In vitro} mutation accumulation}
\subsection{Calculate the results}

Once all the prerequired data is loaded and processed, the results for the 
\textit{in vitro} mutation accumulation can
be calculated with the \texttt{probDriverMut} function. Here, you can give the
cell types and genes for which the results must be calculated. 

<<invitro_res>>=
invitro_res <- probDriverMut(cell_types = cell_types, 
                             genes = names(driver_counts))
head(invitro_res)
@

The statistics type (mean, mean minus standard deviation or mean plus standard
deviations) can be also be given as a vector.

<<invitro_res_stat, eval = F>>=
invitro_res <- probDriverMut(cell_types = cell_types, 
                             genes = names(driver_counts), 
                             stat_type = c("mean",
                                           "mean-std",
                                           "mean+std"))
@

\subsection{Plot the results}

Before the results will be plotted, set the type of mutations and cell types in
the order you want:

<<factorize>>=
invitro_res$cell_type <- factor(invitro_res$cell_type, 
                                levels = c("liver", "SI", "iPS"))
invitro_res$gene <- factor(invitro_res$gene, 
                           levels = c("all", "TP53", "BRAF.V600E"))
@

Calculate the intersections of all plotted with a given horizontal line with
the function \texttt{calcIntersects}:

<<calcIntersect>>=
xintersects <- calcIntersects(r = invitro_res, hline = 1)
@

Then plot the results, along with the horizontal and vertical lines and save
the figure as pdf with the filename given in \texttt{pdf\_out}:

<<plot_mutations, eval = F>>=
plotMutationsPerCell(invitro_res, 
                     xmax = 1e13,
                     ymax = 1e1,
                     hline = 1,
                     vline = xintersects,
                     ylab = 'Number of mutations',
                     pdf_out = pdf_out)
@

<<plot_mutations, echo = F>>=
mutation_plot <- plotMutationsPerCell(invitro_res, 
                     xmax = 1e13,
                     ymax = 1e1,
                     hline = 1,
                     vline = xintersects,
                     ylab = 'Number of mutations',
                     pdf_out = "All_types.pdf")
@

\begin{figure}[H]
\begin{center}
\includegraphics[width=1.0\textwidth]{All_types}
\end{center}
\end{figure}

\newpage{}

\section{\textit{In vivo} mutation accumulation}

To place the results of the \textit{in vitro} mutation accumulation
in context, results from \textit{in vivo} mutation accumulation can be plotted
compared with the mutations from \textit{in vitro} growth, based on the 
probability to gain at least one oncogenic driver mutation. The function 
\texttt{invivoYears} will extend the results from \texttt{probDriverMut} with
the amount of year of \textit{in vivo} mutation accumulation and define two
functions to confer number of cells into years:

<<invivo_res>>=
invitro_res <- invivoYears(invitro_res, gene = "all", 
                           dep_invitro = CDS_dep, 
                           CDS_length = CDS_length[["SI"]])
head(invitro_res)
@

Results can be plotted with \texttt{plotInvivoResults} and saved as pdf with 
the filename given in \texttt{pdf\_out}. Per default, \texttt{gene = all} will
be used.

<<invivo_res_plot_e, eval = F>>=
plotInvivoResults(invitro_res, pdf_out = pdf_out)
@

<<invivo_res_plot, echo = F>>=
invivo_plot <- plotInvivoResults(invitro_res, pdf_out = "invivo_all.pdf")
@

\begin{figure}[H]
\begin{center}
\includegraphics[width=1.0\textwidth]{invivo_all}
\end{center}
\end{figure}

Plot also the results of the "BRAF.V600E" mutation:

<<invivo_res_plot_e, eval = F>>=
plotInvivoResults(invitro_res, gene = "BRAF.V600E", pdf_out = pdf_out,
                  color = "green")
@

<<invivo_res_plot, echo = F>>=
invivo_plot <- plotInvivoResults(invitro_res, 
                                 gene = "BRAF.V600E",
                                 pdf_out = "invivo_BRAF.pdf",
                                 color = "green")
@

\begin{figure}[H]
\begin{center}
\includegraphics[width=1.0\textwidth]{invivo_BRAF}
\end{center}
\end{figure}

\end{document}